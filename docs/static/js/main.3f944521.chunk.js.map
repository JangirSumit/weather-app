{"version":3,"sources":["components/weatherTile.js","components/weatherTiles.js","components/textSearch.js","commonFunctions/debounce.js","components/filters.js","components/weatherMaster.js","App.js","serviceWorker.js","index.js"],"names":["WeatherTile","date","Date","this","props","weatherDetail","dt_txt","icon","weather","low_temp","parseFloat","main","temp_min","high_temp","temp_max","feels_like","react_default","a","createElement","Col","className","style","paddingTop","fontSize","fontWeight","concat","getDate","getMonth","getHours","getMinutes","src","alt","description","width","height","display","textAlign","paddingLeft","wordBreak","Math","round","humidity","wind","speed","deg","Component","WeatherTiles","theDate","days","getTime","newData","dates","date1","getFullYear","data","list","forEach","d","dt","date2","push","_this","length","tiles","filterType","getPerHourData","map","weatherTile","key","city","name","country","coord","lat","lon","TextSearch","event","onKeyUp","target","value","FormGroup","controlId","FormControl","type","onChange","bind","placeholder","debounce","func","wait","immediate","timeout","context","args","arguments","callNow","clearTimeout","setTimeout","apply","val","handleFilterChange","ButtonToolbar","align","ToggleButtonGroup","defaultValue","handleChange","ToggleButton","WeatherMaster","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","search","loadData","state","self","url","fetch","then","response","json","catch","error","console","log","Fragment","Jumbotron","textSearch","filters","weatherTiles","filterText","App","weatherMaster","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f944521.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport \"../App.css\";\n\nclass WeatherTile extends Component {\n  render() {\n    const kelvin = 273.15;\n    let date = new Date(this.props.weatherDetail.dt_txt);\n    let icon =\n      \"http://openweathermap.org/img/w/\" +\n      this.props.weatherDetail.weather[0].icon +\n      \".png\";\n    let low_temp = parseFloat(this.props.weatherDetail.main.temp_min);\n    let high_temp = parseFloat(this.props.weatherDetail.main.temp_max);\n    let feels_like = parseFloat(this.props.weatherDetail.main.feels_like);\n\n    low_temp -= kelvin;\n    high_temp -= kelvin;\n    feels_like-=kelvin;\n\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ];\n\n    return (\n      <Col className=\"weather-tile\">\n        <div>\n          <p style={{ paddingTop: \"5px\", fontSize:\"17px\", fontWeight: \"bold\" }}>\n              {\n                `${date.getDate()} ${monthNames[date.getMonth()]}`}<br/>\n                {`${\n                    date.getHours() < 10\n                      ? \"0\" + date.getHours()\n                      : date.getHours()\n                  }:${\n                    date.getMinutes() < 10\n                      ? \"0\" + date.getMinutes()\n                      : date.getMinutes()\n                  }`}\n          </p>\n          <img\n            src={icon}\n            alt={this.props.weatherDetail.weather[0].description}\n            style={{ width: \"120px\", height: \"100px\", display: \"inline-block\" }}\n          />\n          <div\n            style={{\n              textAlign: \"left\",\n              paddingLeft: \"10px\",\n              wordBreak: \"break-word\"\n            }}\n          >\n            <p>\n              Temp :<strong>{Math.round(low_temp, 2)}&#176;C</strong>/\n              <span>{Math.round(high_temp, 2)}&#176;C</span>\n            </p>\n            <p>\n              Feels Like :<strong>{Math.round(feels_like, 2)}&#176;C</strong>\n            </p>\n            <p\n              style={{\n                wordBreak: \"break-word\"\n              }}\n            >\n              <span>Humidity : </span>\n              <span>{this.props.weatherDetail.main.humidity}</span>\n            </p>\n            <p\n              style={{\n                wordBreak: \"break-word\"\n              }}\n            >\n              <span>Weather : </span>\n              <span>{this.props.weatherDetail.weather[0].description}</span>\n            </p>\n            <p>\n              Wind : {this.props.weatherDetail.wind.speed} km/h,{\" \"}\n              {this.props.weatherDetail.wind.deg}&#176;\n            </p>\n          </div>\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default WeatherTile;\n","import React, { Component } from \"react\";\nimport WeatherTile from \"./weatherTile\";\nimport \"../App.css\";\n\nclass WeatherTiles extends Component {\n  addDays(theDate, days) {\n    return new Date(theDate.getTime() + days * 24 * 60 * 60 * 1000);\n  }\n\n  getPerHourData() {\n    let newData = [];\n    let dates = [];\n    let date = new Date();\n    let date1 =\n      date.getMonth() + \"/\" + date.getDate() + \"/\" + date.getFullYear();\n\n    this.props.data.list.forEach(d => {\n      let dt = new Date(d.dt_txt);\n      let date2 = dt.getMonth() + \"/\" + dt.getDate() + \"/\" + dt.getFullYear();\n\n      if (date1 === date2) {\n        newData.push(d);\n        dates.push(`${dt.getHours()}:${dt.getMinutes()}`);\n      }\n    });\n    return newData;\n  }\n\n  render() {\n    if (!this.props.data.list || this.props.data.list.length <= 0)\n      return <div>No Data</div>;\n\n    let tiles = {};\n\n    if (this.props.filterType === 1) {\n      tiles = this.getPerHourData(this.props.data.list).map(weatherDetail => {\n        return (\n          <WeatherTile\n            weatherDetail={weatherDetail}\n            key={weatherDetail.dt}\n            filterType={this.props.filterType}\n          />\n        );\n      });\n    } else {\n      tiles = this.props.data.list.map(weatherDetail => {\n        return (\n          <WeatherTile weatherDetail={weatherDetail} key={weatherDetail.dt} />\n        );\n      });\n    }\n\n    return (\n      <div>\n        <h2>\n          {this.props.data.city.name},{this.props.data.city.country}\n        </h2>\n        <p>\n          Lat: {this.props.data.city.coord.lat}, Long:{\" \"}\n          {this.props.data.city.coord.lon}\n        </p>\n        <div className=\"tiles-container\">{tiles}</div>\n      </div>\n    );\n  }\n}\n\nexport default WeatherTiles;\n","import React, { Component } from \"react\";\nimport { FormGroup, FormControl } from \"react-bootstrap\";\nimport \"../App.css\";\n\nclass TextSearch extends Component {\n  onKeyUp(event) {\n    this.props.onKeyUp(event.target.value);\n  }\n\n  render() {\n    return (\n      <form>\n        <FormGroup controlId=\"formBasicText\">\n          <FormControl\n            type=\"text\"\n            onChange={this.onKeyUp.bind(this)}\n            placeholder=\"seach by city name...\"\n            style={{ width: \"95%\", display: \"inline-block\" }}\n          />\n        </FormGroup>\n      </form>\n    );\n  }\n}\n\nexport default TextSearch;\n","function debounce(func, wait, immediate) {\n  var timeout;\n\n  return function executedFunction() {\n    var context = this;\n    var args = arguments;\n\n    var later = function() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    var callNow = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = setTimeout(later, wait);\n\n    if (callNow) func.apply(context, args);\n  };\n}\n\nexport default debounce;\n","import React, { Component } from \"react\";\nimport {\n  ButtonToolbar,\n  ToggleButton,\n  ToggleButtonGroup\n} from \"react-bootstrap\";\nimport \"../App.css\";\n\nclass TextSearch extends Component {\n  handleChange(val) {\n    this.props.handleFilterChange(val);\n  }\n\n  render() {\n    return (\n      <center>\n        <ButtonToolbar\n          align=\"center\"\n          style={{ width: \"auto\", display: \"inline-block\" }}\n        >\n          <ToggleButtonGroup\n            type=\"radio\"\n            name=\"options\"\n            defaultValue={1}\n            onChange={this.handleChange.bind(this)}\n          >\n            <ToggleButton value={1}>Today</ToggleButton>\n            <ToggleButton value={2}>next 5 days</ToggleButton>\n          </ToggleButtonGroup>\n        </ButtonToolbar>\n      </center>\n    );\n  }\n}\n\nexport default TextSearch;\n","import React, { Component } from \"react\";\nimport WeatherTiles from \"./weatherTiles\";\nimport TextSearch from \"./textSearch\";\nimport { Jumbotron } from \"react-bootstrap\";\nimport debounce from \"../commonFunctions/debounce\";\nimport Filters from \"./filters\";\nimport \"../App.css\";\n\nclass WeatherMaster extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      filterType: 1,\n      search:\"\"\n    };\n  }\n\n  onKeyUp = debounce(value => {\n    this.setState({\n      search: value\n    });\n    this.loadData(value);\n  }, 300);\n\n  handleFilterChange(val) {\n    this.setState({\n      filterType: val\n    });\n    this.loadData();\n  }\n\n  loadData() {\n    let self = this;\n    let url =\n      \"https://api.openweathermap.org/data/2.5/forecast?q=\" +\n      this.state.search +\n      \"&apikey=c009a01307a90715e546e205a780c0a6\";\n\n      if (this.state.filterType === 2) {\n        url+=\"&cnt=5\"\n      }\n\n    fetch(url)\n      .then(response => {\n        return response.json();\n      })\n      .then(d => {\n        self.setState({\n          data: d\n        });\n      })\n      .catch(error => {\n        console.log(\"Error : \" + error);\n      });\n  }\n\n  render() {\n    return (\n      <>\n        <Jumbotron className=\"header\">\n          <h3>\n            <strong>Indra</strong>\n          </h3>\n          <small>Weather forecast</small>\n        </Jumbotron>\n        <TextSearch onKeyUp={this.onKeyUp.bind(this)} />\n        <Filters handleFilterChange={this.handleFilterChange.bind(this)} />\n        <WeatherTiles\n          filterText={this.state.search}\n          data={this.state.data}\n          filterType={this.state.filterType}\n        />\n      </>\n    );\n  }\n}\n\nexport default WeatherMaster;\n","import React, { Component } from \"react\";\nimport WeatherMaster from \"../src/components/weatherMaster\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WeatherMaster />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}