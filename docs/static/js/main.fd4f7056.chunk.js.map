{"version":3,"sources":["components/weatherTile.js","components/weatherTiles.js","components/textSearch.js","commonFunctions/debounce.js","components/filters.js","components/weatherMaster.js","App.js","serviceWorker.js","index.js"],"names":["WeatherTile","date","Date","this","props","weatherDetail","dt_txt","icon","weather","low_temp","parseFloat","main","temp_min","high_temp","temp_max","feels_like","react_default","a","createElement","Col","className","style","paddingTop","fontSize","fontWeight","concat","getDate","getMonth","getHours","getMinutes","src","alt","description","width","height","display","textAlign","paddingLeft","wordBreak","Math","round","humidity","wind","speed","deg","Component","WeatherTiles","theDate","days","getTime","newData","dates","date1","getFullYear","data","list","forEach","d","dt","date2","push","_this","length","tiles","filterType","getPerHourData","map","weatherTile","key","city","name","country","coord","lat","lon","TextSearch","event","onKeyUp","target","value","FormGroup","controlId","FormControl","type","onChange","bind","placeholder","debounce","func","wait","immediate","timeout","context","args","arguments","callNow","clearTimeout","setTimeout","apply","val","handleFilterChange","ButtonToolbar","align","ToggleButtonGroup","defaultValue","handleChange","ToggleButton","WeatherMaster","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadData","state","query","_this2","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","setState","search","self","url","fetch","then","response","json","catch","error","console","log","Fragment","verticalAlign","marginTop","textSearch","filters","weatherTiles","filterText","App","weatherMaster","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd4f7056.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport \"../App.css\";\r\n\r\nclass WeatherTile extends Component {\r\n  render() {\r\n    const kelvin = 273.15;\r\n    let date = new Date(this.props.weatherDetail.dt_txt);\r\n    let icon =\r\n      \"http://openweathermap.org/img/w/\" +\r\n      this.props.weatherDetail.weather[0].icon +\r\n      \".png\";\r\n    let low_temp = parseFloat(this.props.weatherDetail.main.temp_min);\r\n    let high_temp = parseFloat(this.props.weatherDetail.main.temp_max);\r\n    let feels_like = parseFloat(this.props.weatherDetail.main.feels_like);\r\n\r\n    low_temp -= kelvin;\r\n    high_temp -= kelvin;\r\n    feels_like-=kelvin;\r\n\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n\r\n    return (\r\n      <Col className=\"weather-tile\">\r\n        <div>\r\n          <p style={{ paddingTop: \"5px\", fontSize:\"17px\", fontWeight: \"bold\" }}>\r\n              {\r\n                `${date.getDate()} ${monthNames[date.getMonth()]}`}<br/>\r\n                {`${\r\n                    date.getHours() < 10\r\n                      ? \"0\" + date.getHours()\r\n                      : date.getHours()\r\n                  }:${\r\n                    date.getMinutes() < 10\r\n                      ? \"0\" + date.getMinutes()\r\n                      : date.getMinutes()\r\n                  }`}\r\n          </p>\r\n          <img\r\n            src={icon}\r\n            alt={this.props.weatherDetail.weather[0].description}\r\n            style={{ width: \"120px\", height: \"100px\", display: \"inline-block\" }}\r\n          />\r\n          <div\r\n            style={{\r\n              textAlign: \"left\",\r\n              paddingLeft: \"10px\",\r\n              wordBreak: \"break-word\"\r\n            }}\r\n          >\r\n            <p>\r\n              Temp :<strong>{Math.round(low_temp, 2)}&#176;C</strong>/\r\n              <span>{Math.round(high_temp, 2)}&#176;C</span>\r\n            </p>\r\n            <p>\r\n              Feels Like :<strong>{Math.round(feels_like, 2)}&#176;C</strong>\r\n            </p>\r\n            <p\r\n              style={{\r\n                wordBreak: \"break-word\"\r\n              }}\r\n            >\r\n              <span>Humidity : </span>\r\n              <span>{this.props.weatherDetail.main.humidity}</span>\r\n            </p>\r\n            <p\r\n              style={{\r\n                wordBreak: \"break-word\"\r\n              }}\r\n            >\r\n              <span>Weather : </span>\r\n              <span>{this.props.weatherDetail.weather[0].description}</span>\r\n            </p>\r\n            <p>\r\n              Wind : {this.props.weatherDetail.wind.speed} km/h,{\" \"}\r\n              {this.props.weatherDetail.wind.deg}&#176;\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherTile;\r\n","import React, { Component } from \"react\";\r\nimport WeatherTile from \"./weatherTile\";\r\nimport \"../App.css\";\r\n\r\nclass WeatherTiles extends Component {\r\n  addDays(theDate, days) {\r\n    return new Date(theDate.getTime() + days * 24 * 60 * 60 * 1000);\r\n  }\r\n\r\n  getPerHourData() {\r\n    let newData = [];\r\n    let dates = [];\r\n    let date = new Date();\r\n    let date1 =\r\n      date.getMonth() + \"/\" + date.getDate() + \"/\" + date.getFullYear();\r\n\r\n    this.props.data.list.forEach((d) => {\r\n      let dt = new Date(d.dt_txt);\r\n      let date2 = dt.getMonth() + \"/\" + dt.getDate() + \"/\" + dt.getFullYear();\r\n\r\n      if (date1 === date2) {\r\n        newData.push(d);\r\n        dates.push(`${dt.getHours()}:${dt.getMinutes()}`);\r\n      }\r\n    });\r\n    return newData;\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.data.list || this.props.data.list.length <= 0)\r\n      return <div>No Data</div>;\r\n\r\n    let tiles = {};\r\n\r\n    if (this.props.filterType === 1) {\r\n      tiles = this.getPerHourData(this.props.data.list).map((weatherDetail) => {\r\n        return (\r\n          <WeatherTile\r\n            weatherDetail={weatherDetail}\r\n            key={weatherDetail.dt}\r\n            filterType={this.props.filterType}\r\n          />\r\n        );\r\n      });\r\n    } else {\r\n      tiles = this.props.data.list.map((weatherDetail) => {\r\n        return (\r\n          <WeatherTile weatherDetail={weatherDetail} key={weatherDetail.dt} />\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h2>\r\n          {this.props.data.city.name},{this.props.data.city.country}\r\n        </h2>\r\n        <p>\r\n          Lat: <b>{this.props.data.city.coord.lat}</b>, Long:{\" \"}\r\n          <b>{this.props.data.city.coord.lon}</b>\r\n        </p>\r\n        <div className=\"tiles-container\">{tiles}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherTiles;\r\n","import React, { Component } from \"react\";\r\nimport { FormGroup, FormControl } from \"react-bootstrap\";\r\nimport \"../App.css\";\r\n\r\nclass TextSearch extends Component {\r\n  onKeyUp(event) {\r\n    this.props.onKeyUp(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <FormGroup controlId=\"formBasicText\">\r\n          <FormControl\r\n            type=\"text\"\r\n            onChange={this.onKeyUp.bind(this)}\r\n            placeholder=\"seach by city name...\"\r\n            style={{ width: \"95%\", display: \"inline-block\" }}\r\n          />\r\n        </FormGroup>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextSearch;\r\n","function debounce(func, wait, immediate) {\r\n  var timeout;\r\n\r\n  return function executedFunction() {\r\n    var context = this;\r\n    var args = arguments;\r\n\r\n    var later = function() {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n\r\n    var callNow = immediate && !timeout;\r\n\r\n    clearTimeout(timeout);\r\n\r\n    timeout = setTimeout(later, wait);\r\n\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n}\r\n\r\nexport default debounce;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  ButtonToolbar,\r\n  ToggleButton,\r\n  ToggleButtonGroup\r\n} from \"react-bootstrap\";\r\nimport \"../App.css\";\r\n\r\nclass TextSearch extends Component {\r\n  handleChange(val) {\r\n    this.props.handleFilterChange(val);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <center>\r\n        <ButtonToolbar\r\n          align=\"center\"\r\n          style={{ width: \"auto\", display: \"inline-block\" }}\r\n        >\r\n          <ToggleButtonGroup\r\n            type=\"radio\"\r\n            name=\"options\"\r\n            defaultValue={1}\r\n            onChange={this.handleChange.bind(this)}\r\n          >\r\n            <ToggleButton value={1}>Today</ToggleButton>\r\n            <ToggleButton value={2}>next 5 days</ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </ButtonToolbar>\r\n      </center>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextSearch;\r\n","import React, { Component } from \"react\";\r\nimport WeatherTiles from \"./weatherTiles\";\r\nimport TextSearch from \"./textSearch\";\r\nimport { Jumbotron } from \"react-bootstrap\";\r\nimport debounce from \"../commonFunctions/debounce\";\r\nimport Filters from \"./filters\";\r\nimport \"../App.css\";\r\n\r\nclass WeatherMaster extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      filterType: 1,\r\n      query: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        var latitude = position.coords.latitude;\r\n        var longitude = position.coords.longitude;\r\n\r\n        this.loadData(`lat=${latitude}&lon=${longitude}`);\r\n      });\r\n    }\r\n  }\r\n\r\n  onKeyUp = debounce((value) => {\r\n    this.loadData(\"q=\" + value);\r\n  }, 400);\r\n\r\n  handleFilterChange(val) {\r\n    this.setState({\r\n      filterType: val,\r\n    });\r\n    this.loadData(this.state.query);\r\n  }\r\n\r\n  loadData(search) {\r\n    let self = this;\r\n    let url =\r\n      \"https://api.openweathermap.org/data/2.5/forecast?\" +\r\n      search +\r\n      \"&apikey=c009a01307a90715e546e205a780c0a6\";\r\n\r\n    if (this.state.filterType === 2) {\r\n      url += \"&cnt=5\";\r\n    }\r\n\r\n    fetch(url)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((d) => {\r\n        self.setState({\r\n          data: d,\r\n          query: search,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error : \" + error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"header jumbotron\">\r\n          <img\r\n            src=\"http://localhost:3000/indra.ico\"\r\n            width=\"56\"\r\n            alt=\"\"\r\n            style={{ display: \"inline-block\", verticalAlign: \"unset\" }}\r\n          />\r\n          <div style={{ display: \"inline-block\", paddingLeft: \"5px\" }}>\r\n            <h3 style={{ marginTop: \"0px !imprtant\" }}>\r\n              <strong>Indra</strong>\r\n            </h3>\r\n            <small>Weather forecast</small>\r\n          </div>\r\n        </div>\r\n        <TextSearch onKeyUp={this.onKeyUp.bind(this)} />\r\n        <Filters handleFilterChange={this.handleFilterChange.bind(this)} />\r\n        <WeatherTiles\r\n          filterText={this.state.search}\r\n          data={this.state.data}\r\n          filterType={this.state.filterType}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherMaster;\r\n","import React, { Component } from \"react\";\r\nimport WeatherMaster from \"../src/components/weatherMaster\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <WeatherMaster />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}